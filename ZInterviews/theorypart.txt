1. how to create main branch through command:--  git checkout -b main
2. different b/w package.json and package-lock.json
   
    Summary of Differences
    Feature             	   package.json	      package-lock.json
    Editable by developer	     ✅ Yes	            ❌ No
    Contains metadata	         ✅ Yes	            ❌ No
    Contains exact versions	     ❌ No (can use ^/~)	✅ Yes
    Controls install	         ✅ Yes            	✅ Yes (for locking versions)
    Tracks sub-dependencies	     ❌ No	            ✅ Yes
    Should be committed	         ✅ Yes	            ✅ Yes

3. diffrence b/w normal dependency  and Dev dependency
4. CDN

5. Tilde and caret
    Operator	Range Allowed	                Example Version	    Installs Up To
      ~	         Patch(major) updates only	                ~1.2.3	            <1.3.0
      ^	         Minor + patch (major stays same)	^1.2.3	            <2.0.0


6. diffrence b/w normal function and arrow function
7. Pure function and impure function.
8.What is Currying function in JavaScript?
   --> Currying is a functional programming technique where a function with multiple arguments is transformed into a sequence of functions, each taking one argument at a time.
       function add(a) {
          return function(b) {
            return a + b;
          };
        }
        add(2)(3); // returns 5

9. Lexical scope (also called static scope) means that the scope of a variable is determined by its position in the source code — where it is physically written — and not by how or where the function is called.
10. A closure gives you access to an outer function’s variables from inside an inner function, even after the outer function has finished executing.
11. Array Method:-pop, push,index, map, reduce, filter, some, every etc.

---->every() Method:- Checks if all elements in the array pass the test (returns true).
---->some() Method:- Checks if at least one elements in the array pass the test (returns true). otherwise false

12.  Shallow Copy:-->A shallow copy creates a new object, but copies references to the nested objects — not the nested values themselves. Changes to nested objects in the original will affect the copy, and vice versa.
13.  Deep Copy:-->A deep copy creates a new object and recursively copies all nested properties, so there's no shared references. Changing nested values in one object does not affect the other.
14. It allows JavaScript to perform non-blocking operations (like setTimeout, fetch, promises, etc.) by offloading them to the browser and handling their callbacks later, without stopping the execution of other code.


